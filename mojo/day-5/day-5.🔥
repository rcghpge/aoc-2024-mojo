# Day 5 Mojo solution incomplete. See aoc-cheat-sheet repo for complete day 5 solutions in Python.

fn parse_input(input_data: String) -> (List[SIMD[(Int, Int)]], List[List[Int]]):
    var sections = input_data.split("\n\n")
    var rules_section = sections[0].split("\n")
    var updates_section = sections[1].split("\n")
    
    var rules = List[SIMD[(Int, Int)]]()
    for line in rules_section:
        if line != "":
            var parts = line.split("|")
            var x = Int(parts[0])
            var y = Int(parts[1])
            rules.append((x, y))
    
    var updates = List[List[Int]]()
    for line in updates_section:
        if line != "":
            var pages = line.split(",")
            var update = List[Int]()
            for page in pages:
                update.append(Int(page))
            updates.append(update)
    
    return (rules, updates)

fn is_valid_update(update: List[Int], rules: List[SIMD[(Int, Int)]]) -> Bool:
    for (x, y) in rules:
        var x_index = update.index(x) if x in update else -1
        var y_index = update.index(y) if y in update else -1
        if x_index != -1 and y_index != -1 and x_index > y_index:
            return False
    return True

fn find_middle_page(update: List[Int]) -> Int:
    return update[len(update) // 2]

fn sum_of_middle_pages(input_data: String) -> Int:
    var (rules, updates) = parse_input(input_data)
    var total: Int = 0
    for update in updates:
        if is_valid_update(update, rules):
            total += find_middle_page(update)
    return total

fn main():
    var input_data = "input.txt"
    var result = sum_of_middle_pages(input_data)
    print(result)

