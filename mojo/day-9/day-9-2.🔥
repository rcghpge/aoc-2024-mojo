from time import perf_counter

# Part 1 and 2 solutions incomplete. See aoc-cheat-sheet for complete solutions in Python.
# - this is challenging!

def read_input(file_name):
    """Reads input from a file."""
    with open(file_name, 'r') as file:
        return file.readline().strip()

def parse_disk_map(disk_map):
    """Parses the disk map into a detailed representation of files and free spaces."""
    parsed_map = []
    file_lengths = []
    free_space_lengths = []
    for i in range(0, len(disk_map), 2):
        file_length = int(disk_map[i])
        free_space_length = int(disk_map[i + 1])
        file_lengths.append(file_length)
        free_space_lengths.append(free_space_length)
        parsed_map.extend([len(file_lengths) - 1] * file_length)  # File IDs
        parsed_map.extend(['.'] * free_space_length)  # Free spaces
    return parsed_map, file_lengths

def move_whole_files(disk, file_lengths):
    """Compacts the disk by moving whole files to the leftmost span of free space."""
    for file_id in range(len(file_lengths) - 1, -1, -1):
        file_length = file_lengths[file_id]
        file_positions = [i for i, block in enumerate(disk) if block == file_id]
        if not file_positions:
            continue

        # Find leftmost span of free space that can fit file
        for i in range(len(disk)):
            if disk[i] == '.' and all(disk[j] == '.' for j in range(i, i + file_length if i + file_length <= len(disk) else i)):
                # Move file to location
                for pos in file_positions:
                    disk[pos] = '.'
                for j in range(file_length):
                    disk[i + j] = file_id
                break

    return disk

def calculate_checksum(disk):
    """Calculates the filesystem checksum based on the compacted disk."""
    checksum = 0
    for position, block in enumerate(disk):
        if block != '.':
            checksum += position * int(block)
    return checksum

def main():
    start_time = perf_counter()

    # Read and parse input
    input_file = 'input.txt'
    disk_map = read_input(input_file)
    disk, file_lengths = parse_disk_map(disk_map)

    # Compact disk move whole files
    compacted_disk = move_whole_files(disk, file_lengths)

    # Calculate checksum
    checksum = calculate_checksum(compacted_disk)

    end_time = perf_counter()
    execution_time = end_time - start_time

    print("Checksum:" + str(checksum))
    print("Execution Time:" + str(execution_time) + " seconds")


