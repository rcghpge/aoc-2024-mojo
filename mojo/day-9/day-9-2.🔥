# Day 9: Disk Fragmenter
# Part 1 and 2 solutions incomplete. See aoc-proofing-repo for complete solutions in Python.
# - this is challenging!
from collections.string import String
import time

def parse_disk_map(disk_map: String):
    """Parse the disk map and generate the initial block representation."""
    blocks = []
    file_id = 0

    for i in range(0, len(disk_map), 2):
        file_length = int(disk_map[i])
        free_length = int(disk_map[i + 1])

        blocks.extend([str(file_id)] * file_length)
        blocks.extend(['.'] * free_length)

        if file_length > 0:
            file_id += 1

    return ''.join(blocks)

def compact_disk(blocks: str) -> str:
    """Compact the disk by moving file blocks one at a time to the leftmost free space."""
    blocks = list(blocks)
    for i in range(len(blocks) - 1, -1, -1):
        if blocks[i] != '.':
            for j in range(len(blocks)):
                if blocks[j] == '.':
                    blocks[j], blocks[i] = blocks[i], blocks[j]
                    break
    return ''.join(blocks)

def calculate_checksum(blocks: str) -> int:
    """Calculate the filesystem checksum."""
    checksum = 0
    for position, block in enumerate(blocks):
        if block != '.':
            checksum += position * int(block)
    return checksum

def compact_disk_whole_files(blocks: str) -> str:
    """Compact the disk by moving whole files to the leftmost free space."""
    blocks = list(blocks)
    file_positions = {}

    # Determine file positions and lengths
    for index, block in enumerate(blocks):
        if block != '.' and int(block) not in file_positions:
            file_positions[int(block)] = []
        if block != '.':
            file_positions[int(block)].append(index)

    # Sort files by descending file ID
    for file_id in sorted(file_positions.keys(), reverse=True):
        file_indices = file_positions[file_id]
        file_length = len(file_indices)

        # Find the leftmost contiguous free space
        for i in range(len(blocks) - file_length + 1):
            if all(block == '.' for block in blocks[i:i + file_length]):
                # Move the file
                for idx in file_indices:
                    blocks[idx] = '.'
                for j in range(file_length):
                    blocks[i + j] = str(file_id)
                break

    return ''.join(blocks)

fn main() raises:
    input_file = "input.txt"  # Replace with your actual input file
    with open(input_file, 'r') as f:
        disk_map = f.read().strip()

    # Part 1: Compact disk block by block
    start_time_part_1 = time.perf_counter_ns()
    initial_blocks = parse_disk_map(disk_map)
    compacted_blocks = compact_disk(initial_blocks)
    checksum_part_1 = calculate_checksum(compacted_blocks)
    end_time_part_1 = time.perf_counter_ns()
    print("Part 1: Filesystem checksum: ", checksum_part_1)
    print("Part 1 Execution Time (ns): ", end_time_part_1 - start_time_part_1)

    # Part 2: Compact disk by moving whole files
    start_time_part_2 = time.perf_counter_ns()
    compacted_whole_files = compact_disk_whole_files(initial_blocks)
    checksum_part_2 = calculate_checksum(compacted_whole_files)
    end_time_part_2 = time.perf_counter_ns()
    print("Part 2: Filesystem checksum: ", checksum_part_2)
    print("Part 2 Execution Time (ns): ", end_time_part_2 - start_time_part_2)



