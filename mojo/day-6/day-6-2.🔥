# Import modules
from collections import Set
from collections.dict import Dict

# Define struct to represent grid and guard's state
struct Grid:
    var cells: List[List[SIMD[uint8, 1] -> Str]
    var guard_pos: (Int, Int)
    var guard_dir: Char

    fn __init__(inout self, input_map: List[SIMD[uint8, 1] -> Str):
        self.cells = []
        for line in input_map:
            self.cells.append([c for c in line])
        self.find_guard()

    fn find_guard(inout self):
        for r in range(len(self.cells)):
            for c in range(len(self.cells[r])):
                if self.cells[r][c] in ['^', '>', 'v', '<']:
                    self.guard_pos = (r, c)
                    self.guard_dir = self.cells[r][c]
                    self.cells[r][c] = '.'
                    return

    fn is_within_bounds(self, pos: (Int, Int)) -> Bool:
        r, c = pos
        return 0 <= r < len(self.cells) and 0 <= c < len(self.cells[0])

    fn is_obstacle(self, pos: (Int, Int)) -> Bool:
        r, c = pos
        return self.cells[r][c] == '#'

    fn simulate_guard_path(self) -> Bool:
        DIRECTIONS = {'^': (-1, 0), '>': (0, 1), 'v': (1, 0), '<': (0, -1)}
        TURN_RIGHT = {'^': '>', '>': 'v', 'v': '<', '<': '^'}

        visited_positions = Set[(Int, Int)]()
        pos = self.guard_pos
        direction = self.guard_dir

        while self.is_within_bounds(pos):
            if pos in visited_positions:
                return True  # Guard gets stuck in a loop
            visited_positions.insert(pos)

            move = DIRECTIONS[direction]
            next_pos = (pos[0] + move[0], pos[1] + move[1])

            if not self.is_within_bounds(next_pos) or self.is_obstacle(next_pos):
                direction = TURN_RIGHT[direction]  # Turn right
            else:
                pos = next_pos  # Move forward

        return False  # The guard exits the grid

    fn test_new_obstruction(self, pos: (Int, Int)) -> Bool:
        r, c = pos
        if not self.is_within_bounds(pos) or self.is_obstacle(pos):
            return False

        self.cells[r][c] = '#'  # Temporarily place the obstruction
        result = self.simulate_guard_path()
        self.cells[r][c] = '.'  # Remove the obstruction

        return result

# Execute simulation
fn main():
    input_file = "input.txt"  # Path to your input file

    with open(input_file, "r") as file:
        input_map = [line.strip() for line in file]

    grid = Grid(input_map)
    possible_positions = Set[(Int, Int)]()

    for r in range(len(grid.cells)):
        for c in range(len(grid.cells[r])):
            if (r, c) != grid.guard_pos and grid.test_new_obstruction((r, c)):
                possible_positions.insert((r, c))

    print(f"The number of possible positions for a new obstruction: {len(possible_positions)}")

var sim = main()
print(sim)
