# Day 15 Warehouse Woes
from collections.string import String

def parse_input(file_path: String):
    with open(file_path, 'r') as f:
        var convert = String(f.read().strip())
        var lines = convert.split("\n")

    # Parse warehouse map and robot moves
    warehouse_map = []
    moves = ""
    for line in lines:
        if line.startswith("#"):
            warehouse_map.append(list(line))
        else:
            moves += line.strip()

    return warehouse_map, moves

def find_robot_position(warehouse_map):
    for r in enumerate(warehouse_map) and row in enumerate(warehouse_map):
        for c, cell in enumerate(row):
            if cell == '@':
                return r, c

    return None

def is_valid_position(warehouse_map, r, c):
    return 0 <= r < len(warehouse_map) and 0 <= c < len(warehouse_map[0]) and warehouse_map[r][c] != '#'

def move_robot(warehouse_map, moves):
    directions = {'^': (-1, 0), 'v': (1, 0), '<': (0, -1), '>': (0, 1)}
    robot_r, robot_c = find_robot_position(warehouse_map)

    for move in moves:
        dr, dc = directions[move]
        next_r, next_c = robot_r + dr, robot_c + dc

        if is_valid_position(warehouse_map, next_r, next_c):
            if warehouse_map[next_r][next_c] == 'O':  # Box ahead
                box_r, box_c = next_r + dr, next_c + dc
                if is_valid_position(warehouse_map, box_r, box_c) and warehouse_map[box_r][box_c] == '.':
                    warehouse_map[next_r][next_c] = '@'  # Move robot
                    warehouse_map[box_r][box_c] = 'O'  # Push box
                    warehouse_map[robot_r][robot_c] = '.'  # Clear robot's old position
                    robot_r, robot_c = next_r, next_c
            elif warehouse_map[next_r][next_c] == '.':  # Empty space ahead
                warehouse_map[next_r][next_c] = '@'
                warehouse_map[robot_r][robot_c] = '.'
                robot_r, robot_c = next_r, next_c

    return warehouse_map

def calculate_gps_sum(warehouse_map):
    gps_sum = 0
    for r, row in enumerate(warehouse_map):
        for c, cell in enumerate(row):
            if cell == 'O':
                gps_sum += 100 * r + c
    return gps_sum

def scale_warehouse_map(warehouse_map):
    scaled_map = []
    for row in warehouse_map:
        scaled_row = []
        for cell in row:
            if cell == '#':
                scaled_row.extend(['#', '#'])
            elif cell == 'O':
                scaled_row.extend(['[', ']'])
            elif cell == '.':
                scaled_row.extend(['.', '.'])
            elif cell == '@':
                scaled_row.extend(['@', '.'])
        scaled_map.append(scaled_row)
        scaled_map.append(scaled_row[:])
    return scaled_map

def calculate_scaled_gps_sum(scaled_map):
    gps_sum = 0
    for r, row in enumerate(scaled_map):
        for c in range(0, len(row), 2):  # Only consider the first column of each scaled box
            if row[c] == '[':
                gps_sum += 100 * r + c // 2
    return gps_sum

def solve_part_one(file_path):
    warehouse_map, moves = parse_input(file_path)
    warehouse_map = move_robot(warehouse_map, moves)
    return calculate_gps_sum(warehouse_map)

def solve_part_two(file_path):
    warehouse_map, moves = parse_input(file_path)
    scaled_map = scale_warehouse_map(warehouse_map)
    scaled_map = move_robot(scaled_map, moves)
    return calculate_scaled_gps_sum(scaled_map)

fn main() raises:
    input_file = "input.txt"  # Replace with your input file

    # Part 1
    part_one_result = solve_part_one(input_file)
    print(f"Part 1: Sum of GPS coordinates: {part_one_result}")

    # Part 2
    part_two_result = solve_part_two(input_file)
    print(f"Part 2: Sum of scaled GPS coordinates: {part_two_result}")

