# Day 7 Mojo SIMD proofing logic - rd4com's solution 
from math import iota
def main():
    var values = SIMD[DType.int64, 4](1, 2, 4, 8)
    var len_values = int((values!=0).cast[DType.int64]().reduce_add())
    var expected_result = Int64(96) # (1+2*4*8)
    var solutions_results = SIMD[DType.int64, 16](values[0]) # first value
    var mul_or_add = iota[DType.int64, 16]#0) (* or + for index of values)
    for rhs_index in range(len_values):
        if rhs_index == 0: ...
        else:
            var rhs = SIMD[DType.int64, 16](values[rhs_index])
            1: multiply, 0: add
            var is_multiply = ((mul_or_add>>(rhs_index-1))&1).cast[DType.bool]()
            var mul_by_one = SIMD[DType.int64, 16](1)
            mul_by_one=is_multiply.select(rhs,mul_by_one)
            solutions_results*=mul_by_one
            var is_add = ~is_multiply
            var to_add = SIMD[DType.int64, 16](0)
            to_add = is_add.select(rhs, to_add)
            solutions_results += to_add

    print("results:", solutions_results)
    print("at least one solution:",(solutions_results==expected_result).reduce_or())
